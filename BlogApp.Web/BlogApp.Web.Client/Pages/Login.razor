@page "/login"
@using System.ComponentModel
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<MudContainer MaxWidth="MaxWidth.Small">
    <EditForm Model="_loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText>Giriş Yap</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTextField Label="Email" @bind-Value="_loginModel.Email" For="@(() => _loginModel.Email)" />
                <MudTextField Label="Şifre" @bind-Value="_loginModel.Password" For="@(() => _loginModel.Password)"
                    InputType="InputType.Password" />
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
                }
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Giriş Yap
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudContainer>

@code {
    private class LoginModel
    {
        [Required(ErrorMessage = "Email gerekli.")]
        [EmailAddress(ErrorMessage = "Geçersiz email formatı.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Şifre gerekli.")]
        [MinLength(8, ErrorMessage = "Şifre en az 8 karakter olmalı.")]
        public string Password { get; set; } = string.Empty;
    }

    private LoginModel _loginModel = new();
    private string? _errorMessage;

    private async Task HandleLogin()
    {
        _errorMessage = null;
        try
        {
            var response = await Http.PostAsJsonAsync("api/login", _loginModel);

            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                var jwtAuthProvider = (JwtAuthenticationStateProvider)AuthStateProvider;
                await jwtAuthProvider.MarkUserAsAuthenticated(token);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                _errorMessage = "Email veya şifre hatalı.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Bir hata oluştu: {ex.Message}";
        }
    }
}